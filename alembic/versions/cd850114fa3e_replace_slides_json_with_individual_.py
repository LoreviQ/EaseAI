"""Replace slides JSON with individual slide records, remove speaker_notes and delivery_tutorial tables

Revision ID: cd850114fa3e
Revises: 9e79ed7813fc
Create Date: 2025-07-03 23:01:41.222298

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cd850114fa3e'
down_revision: Union[str, Sequence[str], None] = '9e79ed7813fc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('speaker_notes')
    op.drop_table('delivery_tutorials')
    op.add_column('slides', sa.Column('title', sa.String(length=255), nullable=True))
    op.add_column('slides', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('slides', sa.Column('time_spent_on_slide', sa.Integer(), nullable=True))
    op.add_column('slides', sa.Column('slide_number', sa.Integer(), nullable=True))
    op.add_column('slides', sa.Column('content', sa.Text(), nullable=True))
    op.add_column('slides', sa.Column('speaker_notes', sa.Text(), nullable=True))
    op.add_column('slides', sa.Column('delivery_tutorial', sa.Text(), nullable=True))
    op.add_column('slides', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.drop_column('slides', 'generated_at')
    op.drop_column('slides', 'template_id')
    op.drop_column('slides', 'slides_data')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('slides', sa.Column('slides_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('slides', sa.Column('template_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('slides', sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('slides', 'created_at')
    op.drop_column('slides', 'delivery_tutorial')
    op.drop_column('slides', 'speaker_notes')
    op.drop_column('slides', 'content')
    op.drop_column('slides', 'slide_number')
    op.drop_column('slides', 'time_spent_on_slide')
    op.drop_column('slides', 'description')
    op.drop_column('slides', 'title')
    op.create_table('delivery_tutorials',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('introduction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('preparation_tips', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('delivery_techniques', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('practice_exercises', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('troubleshooting', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('delivery_tutorials_project_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('delivery_tutorials_pkey'))
    )
    op.create_table('speaker_notes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sections', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('talking_points', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('q_and_a', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('speaker_notes_project_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('speaker_notes_pkey'))
    )
    # ### end Alembic commands ###
